//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	GoogleBearerAuthScopes = "googleBearerAuth.Scopes"
	GoogleCookieAuthScopes = "googleCookieAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	AuthError            ErrorCode = "AuthError"
	InputValidationError ErrorCode = "InputValidationError"
	InternalError        ErrorCode = "InternalError"
)

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for ErrorCode.
type ErrorCode string

// UserInfo defines model for UserInfo.
type UserInfo struct {
	ExpiresAt     time.Time `json:"expiresAt"`
	IsAdmin       bool      `json:"isAdmin"`
	ProfilePicURL string    `json:"profilePicURL"`
}

// PostLoginGoogleJSONBody defines parameters for PostLoginGoogle.
type PostLoginGoogleJSONBody struct {
	GoogleJWT string `json:"googleJWT"`
}

// PostLoginGoogleJSONRequestBody defines body for PostLoginGoogle for application/json ContentType.
type PostLoginGoogleJSONRequestBody PostLoginGoogleJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Logs in and returns the auth cookie
	// (POST /login/google)
	PostLoginGoogle(w http.ResponseWriter, r *http.Request)
	// Returns info about the logged in user
	// (GET /login/google/userInfo)
	GetLoginGoogleUserInfo(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostLoginGoogle operation middleware
func (siw *ServerInterfaceWrapper) PostLoginGoogle(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLoginGoogle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLoginGoogleUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetLoginGoogleUserInfo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, GoogleCookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, GoogleBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLoginGoogleUserInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/login/google", wrapper.PostLoginGoogle)
	m.HandleFunc("GET "+options.BaseURL+"/login/google/userInfo", wrapper.GetLoginGoogleUserInfo)

	return m
}

type PostLoginGoogleRequestObject struct {
	Body *PostLoginGoogleJSONRequestBody
}

type PostLoginGoogleResponseObject interface {
	VisitPostLoginGoogleResponse(w http.ResponseWriter) error
}

type PostLoginGoogle200ResponseHeaders struct {
	SetCookie string
}

type PostLoginGoogle200Response struct {
	Headers PostLoginGoogle200ResponseHeaders
}

func (response PostLoginGoogle200Response) VisitPostLoginGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type PostLoginGoogle401JSONResponse Error

func (response PostLoginGoogle401JSONResponse) VisitPostLoginGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetLoginGoogleUserInfoRequestObject struct {
}

type GetLoginGoogleUserInfoResponseObject interface {
	VisitGetLoginGoogleUserInfoResponse(w http.ResponseWriter) error
}

type GetLoginGoogleUserInfo200JSONResponse UserInfo

func (response GetLoginGoogleUserInfo200JSONResponse) VisitGetLoginGoogleUserInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLoginGoogleUserInfo401JSONResponse Error

func (response GetLoginGoogleUserInfo401JSONResponse) VisitGetLoginGoogleUserInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Logs in and returns the auth cookie
	// (POST /login/google)
	PostLoginGoogle(ctx context.Context, request PostLoginGoogleRequestObject) (PostLoginGoogleResponseObject, error)
	// Returns info about the logged in user
	// (GET /login/google/userInfo)
	GetLoginGoogleUserInfo(ctx context.Context, request GetLoginGoogleUserInfoRequestObject) (GetLoginGoogleUserInfoResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostLoginGoogle operation middleware
func (sh *strictHandler) PostLoginGoogle(w http.ResponseWriter, r *http.Request) {
	var request PostLoginGoogleRequestObject

	var body PostLoginGoogleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLoginGoogle(ctx, request.(PostLoginGoogleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLoginGoogle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginGoogleResponseObject); ok {
		if err := validResponse.VisitPostLoginGoogleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLoginGoogleUserInfo operation middleware
func (sh *strictHandler) GetLoginGoogleUserInfo(w http.ResponseWriter, r *http.Request) {
	var request GetLoginGoogleUserInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLoginGoogleUserInfo(ctx, request.(GetLoginGoogleUserInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLoginGoogleUserInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLoginGoogleUserInfoResponseObject); ok {
		if err := validResponse.VisitGetLoginGoogleUserInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RU32/bNhD+Vwhuj6rlrHtS0Qc1y1J3xmI0yYrBM1JaPEtsJZIjj2m8QP/7cKQcO7aG",
	"YMCAPUkk7+f3fXePvDKdNRo0el48cl810In4e+GccfRjnbHgUEG8rowE+n7vYMML/l2+D5AP3nl0PSfD",
	"PuMdeC/q6AMPorMt8IKXmgUNDxYqBMmA7JmpquAcyAnPOG4tmXl0Ste87zPu4M+gHEheLFMN+8irJ3uz",
	"/gIVUtZ9CZRXh478ZhrBadGm1jJeBmx2/zNtA/4mWiUFKqPT9eqkkozfenAzvTGn0MCDVQ58iXTYGNcJ",
	"5AWXAuEVqg74SDDlS9kpTQ7D29qYFoSmR+vMRrWwUNXtx/mByT+gsot17JgdFHYKVZ9xD1VwCrfXRF9q",
	"pTambuEdCAeOUKK7dTz9vOvrw6cbniXBxLrj677HBtFSEynSuTFfFewiUcO8ilc841rEAJdXV5fzi7vy",
	"9ub9XYo9RBJW/QJb3lOpagBegq+cssRUUlO5mLGNcaw1da10zZRGw2bnZRnVpDCqjs5sbuoI0j04n9zP",
	"JtPJlGo1FrSwihf8dbzKuBXYREDyltzy1E2k3vjIMwkgKmYmecEXxmNMcJkME0Pg8Z2R2zQ+GkFHT2Ft",
	"q6rom3/xRu/n71RaKS/B8qIM9qYjZPfZEXQ3DbBUK/vw6YahIQSZ0uybwoYfRkYXIKby1mifyvphOh1h",
	"I2DDfKgq8H4T2gmjHBRceeYAg9MgKYNgSQKMBCDZ5yMBfJ6w301gGkBSWUpXbZDAsFF+5+jD2hO8GtkA",
	"s2dqw4InBQw2a+FBMhGwmfxBtDcgJLhY/TXgqyTM0yao5oRk9GVovoIeYk52uhfPl9pRA28X5fX1xU93",
	"s1/p9IYtBDZv8zfsPaK90u12ZM0RPz9Oz/6VUF5cxGO032rqyjj1F+3bwyXAi+Uq4z50nXBbXvC5qX1k",
	"S8uBPc+wGVAZZpj8nw1IHg6WZA0jg3IJh3PytFPH9fWfYPGUYwwOD47F3fI/EvAE+ccBZiqIibUJGBGn",
	"1ZYmh9BNQQ9YexxZtctVn40t8+WqJ5LB3cdRWB6rf+GMDBUdWDLiGQ+uHda6L/JcWDVRlRCTb8a1MueU",
	"53mMualEyyTcj4Uo8ryl98Z4LF5Pp2c571f93wEAAP//bYOIBI4IAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
